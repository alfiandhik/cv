{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOHEBtmcEXOCdfV//j7hj07",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/alfiandhik/cv/blob/main/utility\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 580
        },
        "id": "_bbbVuF7LBFu",
        "outputId": "1fd9b9d9-ad9a-4a53-9360-90e3481ac638"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Utility rata-rata (Heuristic): 0.9990\n",
            "Utility rata-rata (Naive): 0.9974\n",
            "Utility rata-rata (Jaro-Winkler): 0.9971\n"
          ]
        }
      ],
      "source": [
        "# Import library\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Fungsi untuk menghitung Jaccard Index\n",
        "def jaccard_index(set1, set2):\n",
        "    set1, set2 = set(set1), set(set2)\n",
        "    intersection = len(set1 & set2)\n",
        "    union = len(set1 | set2)\n",
        "    return intersection / union if union != 0 else 0\n",
        "\n",
        "# Fungsi untuk membaca dataset dari file\n",
        "def read_dataset(file_path):\n",
        "    with open(file_path, 'r') as file:\n",
        "        data = [list(map(int, line.strip().split())) for line in file]\n",
        "    return data\n",
        "\n",
        "# Baca dataset asli dan hasil modifikasi\n",
        "dataset_asli = read_dataset(\"foodmartFIM.txt\")\n",
        "dataset_heuristic = read_dataset(\"heur.txt\")\n",
        "dataset_naive = read_dataset(\"naiv.txt\")\n",
        "dataset_jaro_winkler = read_dataset(\"jw.txt\")\n",
        "\n",
        "# Fungsi untuk menghitung utility rata-rata\n",
        "def calculate_average_utility(original, modified):\n",
        "    utilities = [jaccard_index(orig, mod) for orig, mod in zip(original, modified)]\n",
        "    return np.mean(utilities), utilities\n",
        "\n",
        "# Hitung rata-rata utility untuk setiap metode\n",
        "average_heur, util_heur = calculate_average_utility(dataset_asli, dataset_heuristic)\n",
        "average_naive, util_naive = calculate_average_utility(dataset_asli, dataset_naive)\n",
        "average_jw, util_jw = calculate_average_utility(dataset_asli, dataset_jaro_winkler)\n",
        "\n",
        "# Data utility dan utility loss untuk setiap metode\n",
        "utility_values = [average_heur, average_naive, average_jw]\n",
        "utility_loss = [1 - val for val in utility_values]\n",
        "\n",
        "# Nilai parameter untuk visualisasi (misalnya metode atau parameter lp)\n",
        "lp_values = [\"Heuristic\", \"Naive\", \"Jaro-Winkler\"]  # Nama metode\n",
        "\n",
        "# Pastikan data sesuai panjangnya\n",
        "assert len(utility_values) == len(lp_values)\n",
        "\n",
        "# Plot stacked bar chart\n",
        "x = np.arange(len(lp_values))  # Posisi x untuk setiap bar\n",
        "width = 0.4  # Lebar bar\n",
        "\n",
        "fig, ax = plt.subplots(figsize=(8, 5))\n",
        "bar1 = ax.bar(x, utility_values, width, label='Utility of the anonymized database', color='lightblue')\n",
        "bar2 = ax.bar(x, utility_loss, width, bottom=utility_values, label='Utility loss', color='orange')\n",
        "\n",
        "# Label dan judul\n",
        "ax.set_xlabel('Methods')\n",
        "ax.set_ylabel('Data utility ratio')\n",
        "ax.set_title('The ratio of data utility between D and $\\~{D}$')\n",
        "ax.set_xticks(x)\n",
        "ax.set_xticklabels(lp_values)\n",
        "ax.legend()\n",
        "\n",
        "# Tampilkan grafik\n",
        "plt.tight_layout()\n",
        "plt.show()\n",
        "\n",
        "# Print hasil utility rata-rata\n",
        "print(f\"Utility rata-rata (Heuristic): {average_heur:.4f}\")\n",
        "print(f\"Utility rata-rata (Naive): {average_naive:.4f}\")\n",
        "print(f\"Utility rata-rata (Jaro-Winkler): {average_jw:.4f}\")\n"
      ]
    }
  ]
}